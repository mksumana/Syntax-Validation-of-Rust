
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN COMMA DIV ELSE EQ FOR GT ID IF IN INTEGER LBRACE LPAREN LT MINUS MULT PLUS RANGE RBRACE RPAREN SEMICOLON WHILEprogram : statementsstatements : statement\n                  | statement statementsstatement : ID ASSIGN expression SEMICOLON\n                 | IF expression LBRACE statements RBRACE\n                 | IF expression LBRACE statements RBRACE ELSE LBRACE statements RBRACE\n                 | WHILE expression LBRACE statements RBRACE\n                 | FOR expression IN RANGE LBRACE statements RBRACE\n                 | expression SEMICOLONexpression : INTEGER\n                  | ID\n                  | ID PLUS ID\n                  | ID MINUS ID\n                  | ID MULT ID\n                  | ID DIV ID\n                  | LPAREN expression RPAREN\n                  | expression EQ expression\n                  | expression LT expression\n                  | expression GT expression'
    
_lr_action_items = {'ID':([0,3,6,7,8,10,12,13,14,15,16,17,18,19,20,34,35,38,42,43,44,47,48,50,],[4,4,22,22,22,22,22,27,28,29,30,-9,22,22,22,4,4,-4,-5,-7,4,4,-8,-6,]),'IF':([0,3,17,34,35,38,42,43,44,47,48,50,],[6,6,-9,6,6,-4,-5,-7,6,6,-8,-6,]),'WHILE':([0,3,17,34,35,38,42,43,44,47,48,50,],[7,7,-9,7,7,-4,-5,-7,7,7,-8,-6,]),'FOR':([0,3,17,34,35,38,42,43,44,47,48,50,],[8,8,-9,8,8,-4,-5,-7,8,8,-8,-6,]),'INTEGER':([0,3,6,7,8,10,12,17,18,19,20,34,35,38,42,43,44,47,48,50,],[9,9,9,9,9,9,9,-9,9,9,9,9,9,-4,-5,-7,9,9,-8,-6,]),'LPAREN':([0,3,6,7,8,10,12,17,18,19,20,34,35,38,42,43,44,47,48,50,],[10,10,10,10,10,10,10,-9,10,10,10,10,10,-4,-5,-7,10,10,-8,-6,]),'$end':([1,2,3,11,17,38,42,43,48,50,],[0,-1,-2,-3,-9,-4,-5,-7,-8,-6,]),'RBRACE':([3,11,17,38,39,40,42,43,46,48,49,50,],[-2,-3,-9,-4,42,43,-5,-7,48,-8,50,-6,]),'ASSIGN':([4,],[12,]),'SEMICOLON':([4,5,9,22,26,27,28,29,30,31,32,33,37,],[-11,17,-10,-11,38,-12,-13,-14,-15,-17,-18,-19,-16,]),'EQ':([4,5,9,21,22,23,24,25,26,27,28,29,30,31,32,33,37,],[-11,18,-10,18,-11,18,18,18,18,-12,-13,-14,-15,18,18,18,-16,]),'LT':([4,5,9,21,22,23,24,25,26,27,28,29,30,31,32,33,37,],[-11,19,-10,19,-11,19,19,19,19,-12,-13,-14,-15,19,19,19,-16,]),'GT':([4,5,9,21,22,23,24,25,26,27,28,29,30,31,32,33,37,],[-11,20,-10,20,-11,20,20,20,20,-12,-13,-14,-15,20,20,20,-16,]),'PLUS':([4,22,],[13,13,]),'MINUS':([4,22,],[14,14,]),'MULT':([4,22,],[15,15,]),'DIV':([4,22,],[16,16,]),'LBRACE':([9,21,22,23,27,28,29,30,31,32,33,37,41,45,],[-10,34,-11,35,-12,-13,-14,-15,-17,-18,-19,-16,44,47,]),'IN':([9,22,24,27,28,29,30,31,32,33,37,],[-10,-11,36,-12,-13,-14,-15,-17,-18,-19,-16,]),'RPAREN':([9,22,25,27,28,29,30,31,32,33,37,],[-10,-11,37,-12,-13,-14,-15,-17,-18,-19,-16,]),'RANGE':([36,],[41,]),'ELSE':([42,],[45,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,3,34,35,44,47,],[2,11,39,40,46,49,]),'statement':([0,3,34,35,44,47,],[3,3,3,3,3,3,]),'expression':([0,3,6,7,8,10,12,18,19,20,34,35,44,47,],[5,5,21,23,24,25,26,31,32,33,5,5,5,5,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','rparser.py',8),
  ('statements -> statement','statements',1,'p_statements','rparser.py',12),
  ('statements -> statement statements','statements',2,'p_statements','rparser.py',13),
  ('statement -> ID ASSIGN expression SEMICOLON','statement',4,'p_statement','rparser.py',20),
  ('statement -> IF expression LBRACE statements RBRACE','statement',5,'p_statement','rparser.py',21),
  ('statement -> IF expression LBRACE statements RBRACE ELSE LBRACE statements RBRACE','statement',9,'p_statement','rparser.py',22),
  ('statement -> WHILE expression LBRACE statements RBRACE','statement',5,'p_statement','rparser.py',23),
  ('statement -> FOR expression IN RANGE LBRACE statements RBRACE','statement',7,'p_statement','rparser.py',24),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','rparser.py',25),
  ('expression -> INTEGER','expression',1,'p_expression','rparser.py',29),
  ('expression -> ID','expression',1,'p_expression','rparser.py',30),
  ('expression -> ID PLUS ID','expression',3,'p_expression','rparser.py',31),
  ('expression -> ID MINUS ID','expression',3,'p_expression','rparser.py',32),
  ('expression -> ID MULT ID','expression',3,'p_expression','rparser.py',33),
  ('expression -> ID DIV ID','expression',3,'p_expression','rparser.py',34),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','rparser.py',35),
  ('expression -> expression EQ expression','expression',3,'p_expression','rparser.py',36),
  ('expression -> expression LT expression','expression',3,'p_expression','rparser.py',37),
  ('expression -> expression GT expression','expression',3,'p_expression','rparser.py',38),
]
